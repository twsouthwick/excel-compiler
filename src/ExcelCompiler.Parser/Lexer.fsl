{
open System

// Opens methods related to fslex.exe
open FSharp.Text.Lexing

open Parser

let inc_lnum bol pos =
  let lnum = pos.pos_lnum in
  {pos with pos_lnum =  lnum+1; pos_bol = bol }

type lexbuf = LexBuffer<char>
type position = Position

let lexeme_end_p (lb:lexbuf) = lb.EndPos
let lexeme_end (lb:lexbuf) = (lexeme_end_p lb).pos_cnum

let lexbuf_set_curr_p (lb:lexbuf) (p : position) = lb.EndPos  <- p

let newline lexbuf =
  lexbuf_set_curr_p lexbuf
    ( inc_lnum (lexeme_end lexbuf) (lexeme_end_p lexbuf))

let lexeme (lexbuf : LexBuffer<char>) = new System.String(lexbuf.Lexeme)
}

// Regular expressions
let char = ['a'-'z' 'A'-'Z']
let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let cell = (char+)(digit+)[^'(']
let identifier  = char(char|digit|['-' '_' '.'])*

rule parsetokens = parse
// ----------------------------
| whitespace      { parsetokens lexbuf }
| newline         { newline lexbuf; parsetokens lexbuf }
// ----------------------------
| digit+  { INT (Int32.Parse(lexeme lexbuf)) }
| digit+('.'digit+)?(['e''E']digit+)?   { FLOAT (Double.Parse(lexeme lexbuf)) }
| identifier  { ID(lexeme lexbuf) }
// ----------------------------
| '"'             { read_string "" false lexbuf }
| "="             { EQUALS }
| "+"             { PLUS }
| "-"             { MINUS }
| "*"             { MULT }
| "/"             { DIVIDE }
| "("             { LEFT_PAREN }
| ")"             { RIGHT_PAREN }
| ","             { COMMA }
| "$"             { DOLLAR }
| ":"             { COLON }
// ----------------------------
| eof             { EOF }
and read_string str ignorequote =
  parse
  | '"'           { if ignorequote  then (read_string (str+"\\\"") false lexbuf) else STRING (str) }
  | '\\'          { read_string str true lexbuf }
  | [^ '"' '\\']+ { read_string (str+(lexeme lexbuf)) false lexbuf }
  | eof           { raise (Exception ("String is not terminated")) }
