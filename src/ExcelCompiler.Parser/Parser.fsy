%{
open ExcelCompiler.Syntax
%}

// Regular tokens
%token <int> INT
%token <float> FLOAT
%token <string> ID
%token <string> STRING

// Misc tokens
%token DOLLAR
%token COMMA
%token LEFT_PAREN
%token RIGHT_PAREN
%token PLUS
%token MINUS
%token MULT
%token DIVIDE
%token EQUALS
%token COLON
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:


// These are the rules of the grammar along with the F# code of the
// actions executed as rules are reduced.

// The start token becomes a parser function in the compiled code:
%start start
%type <ExcelCompiler.Syntax.Statement> start

%%

start: Statement EOF { $1 }

Statement :
	| Expression					{ Formula($1) }

Op:
	| PLUS		{ Add }
	| MINUS		{ Subtract }
	| MULT		{ Multiply }
	| DIVIDE	{ Divide }

Expression:
	| Function							{ $1 }
	| CellReference COLON CellReference { CellReferenceRangeExpression($1, $3) }
	| CellReference						{ CellReferenceExpression($1) }
	| Literal							{ LiteralExpression($1) }
	| Expression Op Expression			{ BinaryExpression($1, $2, $3) }
	| LEFT_PAREN Expression RIGHT_PAREN { $2 }

CellReference:
	| Label						{ CreateCellReference $1 false }
	| Label DOLLAR INT			{ AbsoluteRow($1, $3) }
	| DOLLAR Label				{ CreateCellReference $2 true }
	| DOLLAR Label DOLLAR INT	{ Absolute($2, $4) }

Function:
	| Label LEFT_PAREN ArgList RIGHT_PAREN { FunctionExpression($1, CreateList($3)) }
	| Label LEFT_PAREN RIGHT_PAREN			{ FunctionExpression($1, Empty) }

Label:
	| ID							{ $1 }

ArgList:
	| Expression					{ [$1] }
	| ArgList COMMA Expression		{ $3 :: $1 }

Literal:
	| Number						{ Number($1) }
	| STRING						{ String($1) }

Number:
	| INT							{ Int($1) }
	| FLOAT							{ Float($1) }
	| MINUS INT						{ Int(-$2) }
	| MINUS FLOAT					{ Float(-$2) }
