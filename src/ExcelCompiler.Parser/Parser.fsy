%{
open ExcelCompiler.Syntax
%}

// Regular tokens
%token <int> INT
%token <float> FLOAT
%token <string> ID

// Misc tokens
%token COMMA
%token LEFT_PAREN
%token RIGHT_PAREN
%token PLUS
%token MINUS
%token MULT
%token DIVIDE
%token EQUALS
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:


// These are the rules of the grammar along with the F# code of the
// actions executed as rules are reduced.

// The start token becomes a parser function in the compiled code:
%start start
%type <ExcelCompiler.Syntax.Formula> start

%%

start: Formula EOF { $1 }

Formula:
	| EQUALS Expression					{ Expression($2) }

Expression:
	| Function							{ $1}
	| TermList							{ Terms(CreateList($1)) }

Function:
	| ID LEFT_PAREN ArgList RIGHT_PAREN { Function($1, CreateList($3)) }
	| ID LEFT_PAREN RIGHT_PAREN			{ Function($1, Empty) }

ArgList:
	| Expression					{ [$1] }
	| ArgList COMMA Expression		{ $3 :: $1 }

FactorList:
	| Factor						{ [$1] }
	| FactorList MULT Factor		{ $3 :: $1 }

TermList:
	| Term							{ [$1] }
	| TermList PLUS Term			{ $3 :: $1 }
	| TermList Term					{ $2 :: $1 }

Term:
	| FactorList					{ Factors(CreateList($1)) }

Factor:
	| INT							{ Int($1) }
	| FLOAT							{ Float($1) }
	| LEFT_PAREN Expression RIGHT_PAREN { Factor.Expression($2) }
	| Function						{ Factor.Expression($1)}